---
title: "Search"
layout: 'layouts/content-list.html'

---
<div id="app">
    
    <input type="search" id="search" v-model="term">
    <button @click="search" id="search-submit">Search</button>
	<h2 ref="searchResultHeader" aria-live="assertive">All Repository Content</h2>
    <div v-if="results" v-cloak>
		<ul>
			<li v-for="result in results">
              <article>
				<h3><a :href="result.url"> {% raw %}{{ result.title }}{% endraw %}</a></h3>
              <article>
			</li>
		</ul>
	</div>
    <div v-else>
        <ul>
        {% for item in readCSV.items %}
            {% if item.field_model != 'Page' %}
            <li><article>
              <h3><a href="/{{ contentPath }}/{{ item.id | slugify }}">{{ item.title }}</a></h3>
            </article></li>
            {% endif %}
        {% endfor %}
        </ul>
    </div>
    
</div>

<script src="/js/vue.global.prod.js"></script>
<script src="/js/lunr.min.js"></script>

<script>
const { createApp } = Vue;

const app = createApp({
  data() {
    return {
      docs: null,
      idx: null,
      term: '',
      results: null
    }
  },
  async mounted() {
    let resultLookup = await fetch('/index-lookup.json');
    this.docs = await resultLookup.json();

    let resultIndex = await fetch('/index.json');
    const indexstring = await resultIndex.json();
    this.idx = lunr.Index.load(indexstring);
  },
  computed: {
    noResults() {
      return this.results && this.results.length === 0;
    }
  },
  methods: {
    search() {
      console.log('search', this.term);
      let results = this.idx.search(this.term);

      // we need to add title, url from ref
      results.forEach(r => {
        r.title = decodeEntities(this.docs[r.ref].title);
        r.url = this.docs[r.ref].url;
      });

      this.results = results;
      if (this.term == '') {
        this.$refs.searchResultHeader.textContent = "Showing all Repository Content";
      }
      if (results.length > 0) {
        this.$refs.searchResultHeader.textContent = "Showing Results 1 to " + results.length + " of " + results.length + ".";
      }
      else {
        this.$refs.searchResultHeader.textContent = "No results found.";
      }
    }
  }
});

app.mount('#app');
</script>

<script>
var decodeEntities = (function() {
  // this prevents any overhead from creating the object each time
  var element = document.createElement('div');

  function decodeHTMLEntities (str) {
    if(str && typeof str === 'string') {
      // strip script/html tags
      str = str.replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
      str = str.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
      element.innerHTML = str;
      str = element.textContent;
      element.textContent = '';
    }

    return str;
  }

  return decodeHTMLEntities;
})();
</script>
<script>
	var input = document.getElementById("search");
	input.addEventListener("keypress", function(event) {
		if (event.key === "Enter") {
			event.preventDefault();
			document.getElementById("search-submit").click();
		}
	});

</script>

